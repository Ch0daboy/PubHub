// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PlatformType {
  YOUTUBE
  TWITTER
  INSTAGRAM
  LINKEDIN
  TIKTOK
  BLOG
}

enum ConnectionStatus {
  CONNECTED
  DISCONNECTED
  ERROR
}

enum GapStatus {
  OPEN
  CLOSED
  IN_PROGRESS
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]
  platformConnections PlatformConnection[]
  creatorProfile CreatorProfile?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model PlatformConnection {
  id          String        @id @default(cuid())
  userId      String
  type        PlatformType
  url         String
  status      ConnectionStatus @default(DISCONNECTED)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  contentItems ContentItem[]
}

model ContentItem {
  id          String   @id @default(cuid())
  platformConnectionId String
  title       String
  url         String
  content     String
  metadata    Json?
  analysis    Json?
  createdAt   DateTime @default(now())
  platformConnection PlatformConnection @relation(fields: [platformConnectionId], references: [id], onDelete: Cascade)
  contentGaps ContentGap[]
  repurposedContent RepurposedContent[]
}

model CreatorProfile {
  id        String   @id @default(cuid())
  userId    String   @unique
  voice     String
  style     String
  niche     String
  topics    String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ContentGap {
  id          String    @id @default(cuid())
  contentItemId String
  description String
  status      GapStatus @default(OPEN)
  priority    Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  contentItem ContentItem @relation(fields: [contentItemId], references: [id], onDelete: Cascade)
}

model RepurposedContent {
  id          String      @id @default(cuid())
  contentItemId String
  content     String
  platform    PlatformType
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  contentItem ContentItem   @relation(fields: [contentItemId], references: [id], onDelete: Cascade)
}
